## Project Overview

We are creating a mockup site to ideate over user stories, discuss features, gather ideas, and generally work on building the ground work for our new site, Tech Central.

We have a folder `/html` where we started creating this site. We have now moved over to `/app` where we are creating our SvelteKit & Svelte 5 version of our site.

Your job is to keep everything in `/html` the same as it is. Only use it for reference. We're going to start by copying over pages, components, and elements into our `/app` SvelteKit app.

In the SvelteKit app, when we need to model fetching some data/content from the site, let's use the api routes to do this. We'll build it like we're building a real site that fetches data from a backend. The real site will ultimately be fetching content from a CMS at some point in the future, but not for our mockup site. The mockup will only fetch static content that we will get from the api routes.

## Event Handling

### ❌ Don't use `createEventDispatcher`

```typescript
// DEPRECATED - Don't do this
import { createEventDispatcher } from 'svelte'
const dispatch = createEventDispatcher<{
  someEvent: { data: string }
}>()
dispatch('someEvent', { data: 'value' })
```

### ✅ Do use props for event handling

```typescript
// CORRECT - Do this instead
export let onSomeEvent: (event: { data: string }) => void

// In your component logic
onSomeEvent({ data: 'value' })

// In the parent component
;<MyComponent onSomeEvent={handleSomeEvent} />
```

### Why?

- `createEventDispatcher` is deprecated in Svelte 5
- Props provide better type safety and clearer component interfaces
- Props make it easier to test and mock event handlers
- Props follow a more standard React-like pattern that's familiar to many developers

### Benefits of the new approach:

1. TypeScript support out of the box
2. Better IDE autocompletion
3. Clearer component API
4. More predictable behavior
5. Easier to test and maintain

## `aria` Rules for Buttons and Links

Buttons and links should either contain text or have an `aria-label` or `aria-labelledby` attribute
https://svelte.dev/e/a11y_consider_explicit_label

## Accessibility Rules

### Click Event Handling

- Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler
- Consider using interactive elements like `<button type="button">` or `<a>` instead of divs with click handlers
- When using `<div>` elements with click handlers, they must have an appropriate ARIA role

### Examples

```typescript
// ❌ Don't do this
<div on:click={handleClick}>Click me</div>

// ✅ Do this instead
<button type="button" on:click={handleClick} on:keydown={handleKeydown}>Click me</button>

// If you must use a div, add appropriate ARIA role and keyboard handling
<div
  role="button"
  tabindex="0"
  on:click={handleClick}
  on:keydown={handleKeydown}
>
  Click me
</div>
```

### Why?

- Ensures keyboard accessibility for all interactive elements
- Makes the site usable for users who rely on keyboard navigation
- Improves overall accessibility compliance
- Makes the code more semantic and maintainable

## SvelteKit Store Usage

### Page Store

- The `page` store from `$app/stores` is deprecated
- Use `page` from `$app/state` instead
- This change is required for current SvelteKit compatibility
- When using `page` from `$app/state`, access it directly without the `$` prefix
- Use reactive declarations to track page changes

### Examples

```typescript
// ❌ Don't do this
import { page } from '$app/stores'
$: currentPath = $page.url.pathname

// ✅ Do this instead
import { page } from '$app/state'
$: currentPath = page.url.pathname
```

### Why?

- Ensures current SvelteKit compatibility
- Follows the latest SvelteKit best practices
- Prevents deprecation warnings
- Maintains consistent store usage across the application
- Provides proper reactivity with the new page API
